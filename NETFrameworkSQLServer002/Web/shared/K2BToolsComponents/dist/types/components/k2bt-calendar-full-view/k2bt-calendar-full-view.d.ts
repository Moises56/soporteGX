import { EventEmitter } from '../../stencil-public-runtime';
import { CalendarPeriodView, WeekStartDay } from '../../utils/dateutils';
import { Calendar, CalendarItem, SetPeriodAppointmentsParms } from '../../utils/utils';
export declare class K2btCalendarFullView {
  showheader: boolean;
  showcalendarnavigation: boolean;
  showperiodnavigation: boolean;
  showviewselection: boolean;
  showcalendarselection: boolean;
  starthour: number;
  endhour: number;
  readonly: boolean;
  todaycaption: string;
  daycaption: string;
  weekcaption: string;
  workweekcaption: string;
  monthcaption: string;
  yearcaption: string;
  seemorecaption: string;
  itemsperdayinmonthview: number;
  dayviewenabled: boolean;
  weekviewenabled: boolean;
  workweekviewenabled: boolean;
  monthviewenabled: boolean;
  weekstartday: WeekStartDay;
  currentview: CalendarPeriodView;
  dateFrom: Date;
  dateTo: Date;
  calendars: Calendar[];
  newDraftCreated: EventEmitter<object>;
  draftCancelled: EventEmitter<object>;
  itemClicked: EventEmitter<object>;
  fetchAppointmentsForPeriod: EventEmitter<object>;
  dayView: HTMLK2btCalendarDayViewElement;
  weekView: HTMLK2btCalendarPeriodViewElement;
  monthView: HTMLK2btCalendarMonthViewElement;
  setPeriodAppointments(parm: SetPeriodAppointmentsParms): void;
  static MAX_STORED_ITEMS: number;
  pruneFarawayItems(dateFrom: Date, dateTo: Date): void;
  getDistance(i: CalendarItem, dateFrom: Date, dateTo: Date): number;
  assignCalendarMissingClasses(calendars: Calendar[]): void;
  mergeCalendars(appointments: Calendar[]): void;
  clearAppointmentsInRange(dateFrom: Date, dateTo: Date): void;
  componentWillLoad(): void;
  render(): any;
  private getHeader;
  componentDidRender(): void;
  getCalendarFullViewContent(): any;
  filterSelectedCalendars(calendars: Calendar[]): Calendar[];
  calendarCombo: HTMLK2btEnhancedcomboElement;
  selectedCalendars: string[];
  calendarSelectionChanged(): void;
  getCalendarSelectionCombobox(): any;
  getAvailableCalendars(): {
    value: string;
    description: string;
    badgeClass: string;
  }[];
  periodCombo: HTMLK2btEnhancedcomboElement;
  getPeriodSelectionCombobox(): any;
  private getAvailableContentViews;
  getContextTitle(): any;
  periodSelectionChanged(): void;
  switchView(view: CalendarPeriodView): void;
  cancelDraft(): void;
  getPreviousNextButtons(): any;
  goToNextPeriod(): void;
  goToPreviousPeriod(): void;
  advancedSelectorOpen: boolean;
  quickDaySelectorContainer: HTMLDivElement;
  closeMenu(ev: any): void;
  getTodayButton(): any;
  private getAdvancedSelectorContents;
  dayClicked(d: Date): void;
  goToToday(): void;
  goToDate(date: Date): void;
}
