import { EventEmitter } from '../../stencil-public-runtime';
import { ControlInfoValue } from '../../utils/utils';
export declare class K2btEnhancedsuggest {
  static readonly ERROR_SELECTION_FULL: string;
  value: Array<string>;
  values: Array<object> | string;
  noresultsfoundtext: string;
  open: boolean;
  enableadditem: boolean;
  additemcaption: string;
  enabled: boolean;
  readonlyclass: string;
  searchvalue: string;
  placeholder: string;
  selectedValueDescription: string;
  maxSelectionSize: number;
  errorCode: string;
  suggestmaxitems: number;
  activeElementValue: string;
  showiconsintags: boolean;
  emptyitemtext: string;
  selectionErrorEvent: EventEmitter<object>;
  focusEvent: EventEmitter<string>;
  changeEvent: EventEmitter<string[]>;
  newRecordClickedEvent: EventEmitter<object>;
  inputValueChangedEvent: EventEmitter<object>;
  container: any;
  selectedElement: any;
  searchfield: any;
  isCollection(): boolean;
  private selectionIsFull;
  private itemIsSelected;
  setFocusToSearch(): Promise<void>;
  seekSuggestValuesForMissingValueExecuted: boolean;
  updateDescription(): Promise<void>;
  processInput(event: any): boolean;
  processKeydown(event: KeyboardEvent): void;
  processKeydownCollection(event: KeyboardEvent): void;
  private processEnterKeyWhenCollection;
  private processSpacebarKeyWhenCollection;
  private processArrowUpKeyWhenCollection;
  private processArrowDownKeyWhenCollection;
  processKeydownSingleSelection(event: KeyboardEvent): void;
  private processArrowUpKeyWhenNotCollection;
  private processArrowDownKeyWhenNotCollection;
  private processEnterKeyWhenNotCollection;
  private processTabKeyWhenNotCollection;
  closeMenu(ev: any): void;
  setValue(value: any): Promise<void>;
  private emitChangedEvent;
  setValueWithoutClosing(value: string): void;
  getRawValues(): ControlInfoValue[];
  getFilteredValues(): Array<ControlInfoValue>;
  getFilteredValues_impl(origin: ControlInfoValue[]): ControlInfoValue[];
  onIncludeNewRecordClick(): void;
  getAtomicValues(): Array<ControlInfoValue>;
  removeDuplicates(atomicValues: ControlInfoValue[]): ControlInfoValue[];
  getSuggestPopoverContent(): any;
  onImageError(e: any): void;
  getItemContent(item: ControlInfoValue, containsDetails: boolean, containsIcons: boolean, containsTrailingText: boolean): unknown;
  private getAtomicItemContent;
  private addMainItemContent;
  private addIconIfNecessary;
  private addCheckboxIfNecessary;
  private getItemClass;
  private getCategoryContent;
  getHighlightedText(originalText: string): any;
  seekSuggestValuesDebouncer: any;
  changeSearchValue(value: string): void;
  getValueDescription(): string;
  getReadonlyValue(headerValues: ControlInfoValue[]): string;
  componentWillRender(): void;
  getHeaderTagsContent(vals: ControlInfoValue[]): any[];
  render(): any;
}
