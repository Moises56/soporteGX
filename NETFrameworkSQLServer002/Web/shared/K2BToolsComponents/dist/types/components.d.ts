/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { BaseColorOption, Calendar, CalendarItemAction, ControlInfoValue, ImageWithRegionsDefinition, SetPeriodAppointmentsParms } from "./utils/utils";
import { CalendarPeriodView, WeekStartDay } from "./utils/dateutils";
export namespace Components {
    interface K2btBaseColorPicker {
        "colorOptions": Array<BaseColorOption>;
        "columns": number;
        "containerclass": string;
        "enabled": boolean;
        "errorCode": string;
        "maxSelectionSize": number;
        "selectedIds": Array<string>;
    }
    interface K2btCalendarActionMenu {
        "actions": CalendarItemAction[];
    }
    interface K2btCalendarDayInMonthPicker {
        "selectedDate": Date;
        "weekstartday": WeekStartDay;
    }
    interface K2btCalendarDayView {
        "alldayrows": number;
        "calendars": Calendar[];
        "cancelDraft": () => Promise<void>;
        "day": number;
        "draftItemDescription": string;
        "endHour": number;
        "month": number;
        "readonly": boolean;
        "showhours": boolean;
        "startHour": number;
        "year": number;
    }
    interface K2btCalendarFullView {
        "cancelDraft": () => Promise<void>;
        "dateFrom": Date;
        "dateTo": Date;
        "daycaption": string;
        "dayviewenabled": boolean;
        "endhour": number;
        "goToDate": (date: Date) => Promise<void>;
        "goToNextPeriod": () => Promise<void>;
        "goToPreviousPeriod": () => Promise<void>;
        "itemsperdayinmonthview": number;
        "monthcaption": string;
        "monthviewenabled": boolean;
        "readonly": boolean;
        "seemorecaption": string;
        "setPeriodAppointments": (parm: SetPeriodAppointmentsParms) => Promise<void>;
        "showcalendarnavigation": boolean;
        "showcalendarselection": boolean;
        "showheader": boolean;
        "showperiodnavigation": boolean;
        "showviewselection": boolean;
        "starthour": number;
        "switchView": (view: CalendarPeriodView) => Promise<void>;
        "todaycaption": string;
        "weekcaption": string;
        "weekstartday": WeekStartDay;
        "weekviewenabled": boolean;
        "workweekcaption": string;
        "workweekviewenabled": boolean;
        "yearcaption": string;
    }
    interface K2btCalendarMonthView {
        "calendars": Calendar[];
        "itemsperday": number;
        "month": number;
        "readonly": boolean;
        "seemorecaption": string;
        "weekstartday": WeekStartDay;
        "year": number;
    }
    interface K2btCalendarPeriodView {
        "calendars": Calendar[];
        "cancelDraft": () => Promise<void>;
        "dateFrom": Date;
        "dateTo": Date;
        "draftItemDescription": string;
        "endHour": number;
        "readonly": boolean;
        "startHour": number;
    }
    interface K2btEditCollection {
        "datatype": string;
        "decimals": number;
        "enabled": boolean;
        "inputclass": string;
        "integers": number;
        "invitemessage": string;
        "length": number;
        "maxSelectionSize": number;
        "readonlyclass": string;
        "value": Array<string>;
    }
    interface K2btEnhancedcombo {
        "activeElementValue": string;
        "additemcaption": string;
        "clearselectioncaption": string;
        "displayaslist": boolean;
        "emptyitemtext": string;
        "enableadditem": boolean;
        "enableclearselectionaction": boolean;
        "enabled": boolean;
        "enableselectallaction": boolean;
        "errorCode": string;
        "headermaxvisibleitems": number;
        "includeemptyitem": boolean;
        "includesearch": boolean;
        "maxSelectionSize": number;
        "noresultsfoundtext": string;
        "open": boolean;
        "readonlyclass": string;
        "searchfieldplaceholder": string;
        "searchvalue": string;
        "selectallcaption": string;
        "showiconsintags": boolean;
        "showselectionastags": boolean;
        "value": Array<string>;
        "values": Array<object> | string;
    }
    interface K2btEnhancedsuggest {
        "activeElementValue": string;
        "additemcaption": string;
        "emptyitemtext": string;
        "enableadditem": boolean;
        "enabled": boolean;
        "errorCode": string;
        "maxSelectionSize": number;
        "noresultsfoundtext": string;
        "open": boolean;
        "placeholder": string;
        "readonlyclass": string;
        "searchvalue": string;
        "selectedValueDescription": string;
        "setFocusToSearch": () => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "showiconsintags": boolean;
        "suggestmaxitems": number;
        "updateDescription": () => Promise<void>;
        "value": Array<string>;
        "values": Array<object> | string;
    }
    interface K2btImageRegionSelector {
        "enabled": boolean;
        "errorCode": string;
        "imageWithRegionsDefinition": ImageWithRegionsDefinition;
        "maxSelectionSize": number;
        "selectedIds": Array<string>;
    }
    interface K2btMaskedInput {
        "enabled": boolean;
        "getFormattedValue": () => Promise<string>;
        "getUnformattedValue": () => Promise<any>;
        "inputclass": string;
        "mask"?: string;
        "numeric": boolean;
        "readonlyclass": string;
        "uppercase": boolean;
        "value": string;
    }
    interface K2btNumericInput {
        "decimals": number;
        "decimalseparator": string;
        "enabled": boolean;
        "includesign": boolean;
        "includethousandseparator": boolean;
        "inputclass": string;
        "integerdigits": number;
        "readonlyclass": string;
        "thousandseparator": string;
        "usermustenterdecimalseparator": boolean;
        "value": string;
        "valueprefix": string;
        "zeropadding": boolean;
    }
    interface K2btNumericSlider {
        "enabled": boolean;
        "max": number;
        "min": number;
        "numberclass": string;
        "numberreadonly": boolean;
        "numbervisible": boolean;
        "readonlyclass": string;
        "sliderclass": string;
        "step": number;
        "value": string;
    }
    interface K2btSignaturePad {
        "backgroundcolor": string;
        "backgroundimageurl": string;
        "clearbuttoncaption": string;
        "height": number;
        "showclearbutton": boolean;
        "width": number;
    }
    interface K2btToggleBar {
        "additemcaption": string;
        "emptyitemtext": string;
        "enableadditem": boolean;
        "enabled": boolean;
        "errorCode": string;
        "includeemptyitem": boolean;
        "maxSelectionSize": number;
        "noresultsfoundtext": string;
        "readonlyclass": string;
        "togglestyle": string;
        "value": Array<string>;
        "values": Array<ControlInfoValue>;
    }
}
export interface K2btBaseColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btBaseColorPickerElement;
}
export interface K2btCalendarActionMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarActionMenuElement;
}
export interface K2btCalendarDayInMonthPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarDayInMonthPickerElement;
}
export interface K2btCalendarDayViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarDayViewElement;
}
export interface K2btCalendarFullViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarFullViewElement;
}
export interface K2btCalendarMonthViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarMonthViewElement;
}
export interface K2btCalendarPeriodViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btCalendarPeriodViewElement;
}
export interface K2btEditCollectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btEditCollectionElement;
}
export interface K2btEnhancedcomboCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btEnhancedcomboElement;
}
export interface K2btEnhancedsuggestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btEnhancedsuggestElement;
}
export interface K2btImageRegionSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btImageRegionSelectorElement;
}
export interface K2btMaskedInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btMaskedInputElement;
}
export interface K2btNumericInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btNumericInputElement;
}
export interface K2btNumericSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btNumericSliderElement;
}
export interface K2btSignaturePadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btSignaturePadElement;
}
export interface K2btToggleBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLK2btToggleBarElement;
}
declare global {
    interface HTMLK2btBaseColorPickerElement extends Components.K2btBaseColorPicker, HTMLStencilElement {
    }
    var HTMLK2btBaseColorPickerElement: {
        prototype: HTMLK2btBaseColorPickerElement;
        new (): HTMLK2btBaseColorPickerElement;
    };
    interface HTMLK2btCalendarActionMenuElement extends Components.K2btCalendarActionMenu, HTMLStencilElement {
    }
    var HTMLK2btCalendarActionMenuElement: {
        prototype: HTMLK2btCalendarActionMenuElement;
        new (): HTMLK2btCalendarActionMenuElement;
    };
    interface HTMLK2btCalendarDayInMonthPickerElement extends Components.K2btCalendarDayInMonthPicker, HTMLStencilElement {
    }
    var HTMLK2btCalendarDayInMonthPickerElement: {
        prototype: HTMLK2btCalendarDayInMonthPickerElement;
        new (): HTMLK2btCalendarDayInMonthPickerElement;
    };
    interface HTMLK2btCalendarDayViewElement extends Components.K2btCalendarDayView, HTMLStencilElement {
    }
    var HTMLK2btCalendarDayViewElement: {
        prototype: HTMLK2btCalendarDayViewElement;
        new (): HTMLK2btCalendarDayViewElement;
    };
    interface HTMLK2btCalendarFullViewElement extends Components.K2btCalendarFullView, HTMLStencilElement {
    }
    var HTMLK2btCalendarFullViewElement: {
        prototype: HTMLK2btCalendarFullViewElement;
        new (): HTMLK2btCalendarFullViewElement;
    };
    interface HTMLK2btCalendarMonthViewElement extends Components.K2btCalendarMonthView, HTMLStencilElement {
    }
    var HTMLK2btCalendarMonthViewElement: {
        prototype: HTMLK2btCalendarMonthViewElement;
        new (): HTMLK2btCalendarMonthViewElement;
    };
    interface HTMLK2btCalendarPeriodViewElement extends Components.K2btCalendarPeriodView, HTMLStencilElement {
    }
    var HTMLK2btCalendarPeriodViewElement: {
        prototype: HTMLK2btCalendarPeriodViewElement;
        new (): HTMLK2btCalendarPeriodViewElement;
    };
    interface HTMLK2btEditCollectionElement extends Components.K2btEditCollection, HTMLStencilElement {
    }
    var HTMLK2btEditCollectionElement: {
        prototype: HTMLK2btEditCollectionElement;
        new (): HTMLK2btEditCollectionElement;
    };
    interface HTMLK2btEnhancedcomboElement extends Components.K2btEnhancedcombo, HTMLStencilElement {
    }
    var HTMLK2btEnhancedcomboElement: {
        prototype: HTMLK2btEnhancedcomboElement;
        new (): HTMLK2btEnhancedcomboElement;
    };
    interface HTMLK2btEnhancedsuggestElement extends Components.K2btEnhancedsuggest, HTMLStencilElement {
    }
    var HTMLK2btEnhancedsuggestElement: {
        prototype: HTMLK2btEnhancedsuggestElement;
        new (): HTMLK2btEnhancedsuggestElement;
    };
    interface HTMLK2btImageRegionSelectorElement extends Components.K2btImageRegionSelector, HTMLStencilElement {
    }
    var HTMLK2btImageRegionSelectorElement: {
        prototype: HTMLK2btImageRegionSelectorElement;
        new (): HTMLK2btImageRegionSelectorElement;
    };
    interface HTMLK2btMaskedInputElement extends Components.K2btMaskedInput, HTMLStencilElement {
    }
    var HTMLK2btMaskedInputElement: {
        prototype: HTMLK2btMaskedInputElement;
        new (): HTMLK2btMaskedInputElement;
    };
    interface HTMLK2btNumericInputElement extends Components.K2btNumericInput, HTMLStencilElement {
    }
    var HTMLK2btNumericInputElement: {
        prototype: HTMLK2btNumericInputElement;
        new (): HTMLK2btNumericInputElement;
    };
    interface HTMLK2btNumericSliderElement extends Components.K2btNumericSlider, HTMLStencilElement {
    }
    var HTMLK2btNumericSliderElement: {
        prototype: HTMLK2btNumericSliderElement;
        new (): HTMLK2btNumericSliderElement;
    };
    interface HTMLK2btSignaturePadElement extends Components.K2btSignaturePad, HTMLStencilElement {
    }
    var HTMLK2btSignaturePadElement: {
        prototype: HTMLK2btSignaturePadElement;
        new (): HTMLK2btSignaturePadElement;
    };
    interface HTMLK2btToggleBarElement extends Components.K2btToggleBar, HTMLStencilElement {
    }
    var HTMLK2btToggleBarElement: {
        prototype: HTMLK2btToggleBarElement;
        new (): HTMLK2btToggleBarElement;
    };
    interface HTMLElementTagNameMap {
        "k2bt-base-color-picker": HTMLK2btBaseColorPickerElement;
        "k2bt-calendar-action-menu": HTMLK2btCalendarActionMenuElement;
        "k2bt-calendar-day-in-month-picker": HTMLK2btCalendarDayInMonthPickerElement;
        "k2bt-calendar-day-view": HTMLK2btCalendarDayViewElement;
        "k2bt-calendar-full-view": HTMLK2btCalendarFullViewElement;
        "k2bt-calendar-month-view": HTMLK2btCalendarMonthViewElement;
        "k2bt-calendar-period-view": HTMLK2btCalendarPeriodViewElement;
        "k2bt-edit-collection": HTMLK2btEditCollectionElement;
        "k2bt-enhancedcombo": HTMLK2btEnhancedcomboElement;
        "k2bt-enhancedsuggest": HTMLK2btEnhancedsuggestElement;
        "k2bt-image-region-selector": HTMLK2btImageRegionSelectorElement;
        "k2bt-masked-input": HTMLK2btMaskedInputElement;
        "k2bt-numeric-input": HTMLK2btNumericInputElement;
        "k2bt-numeric-slider": HTMLK2btNumericSliderElement;
        "k2bt-signature-pad": HTMLK2btSignaturePadElement;
        "k2bt-toggle-bar": HTMLK2btToggleBarElement;
    }
}
declare namespace LocalJSX {
    interface K2btBaseColorPicker {
        "colorOptions"?: Array<BaseColorOption>;
        "columns"?: number;
        "containerclass"?: string;
        "enabled"?: boolean;
        "errorCode"?: string;
        "maxSelectionSize"?: number;
        "onSelectionChanged"?: (event: K2btBaseColorPickerCustomEvent<object>) => void;
        "onSelectionError"?: (event: K2btBaseColorPickerCustomEvent<object>) => void;
        "selectedIds"?: Array<string>;
    }
    interface K2btCalendarActionMenu {
        "actions"?: CalendarItemAction[];
        "onActionClicked"?: (event: K2btCalendarActionMenuCustomEvent<string>) => void;
    }
    interface K2btCalendarDayInMonthPicker {
        "onDayClicked"?: (event: K2btCalendarDayInMonthPickerCustomEvent<Date>) => void;
        "selectedDate"?: Date;
        "weekstartday"?: WeekStartDay;
    }
    interface K2btCalendarDayView {
        "alldayrows"?: number;
        "calendars"?: Calendar[];
        "day"?: number;
        "draftItemDescription"?: string;
        "endHour"?: number;
        "month"?: number;
        "onActionClicked"?: (event: K2btCalendarDayViewCustomEvent<object>) => void;
        "onCreatingNewDraft"?: (event: K2btCalendarDayViewCustomEvent<object>) => void;
        "onDraftCancelled"?: (event: K2btCalendarDayViewCustomEvent<object>) => void;
        "onItemClicked"?: (event: K2btCalendarDayViewCustomEvent<object>) => void;
        "onNewDraftCreated"?: (event: K2btCalendarDayViewCustomEvent<object>) => void;
        "readonly"?: boolean;
        "showhours"?: boolean;
        "startHour"?: number;
        "year"?: number;
    }
    interface K2btCalendarFullView {
        "dateFrom"?: Date;
        "dateTo"?: Date;
        "daycaption"?: string;
        "dayviewenabled"?: boolean;
        "endhour"?: number;
        "itemsperdayinmonthview"?: number;
        "monthcaption"?: string;
        "monthviewenabled"?: boolean;
        "onDraftCancelled"?: (event: K2btCalendarFullViewCustomEvent<object>) => void;
        "onFetchAppointmentsForPeriod"?: (event: K2btCalendarFullViewCustomEvent<object>) => void;
        "onItemClicked"?: (event: K2btCalendarFullViewCustomEvent<object>) => void;
        "onNewDraftCreated"?: (event: K2btCalendarFullViewCustomEvent<object>) => void;
        "readonly"?: boolean;
        "seemorecaption"?: string;
        "showcalendarnavigation"?: boolean;
        "showcalendarselection"?: boolean;
        "showheader"?: boolean;
        "showperiodnavigation"?: boolean;
        "showviewselection"?: boolean;
        "starthour"?: number;
        "todaycaption"?: string;
        "weekcaption"?: string;
        "weekstartday"?: WeekStartDay;
        "weekviewenabled"?: boolean;
        "workweekcaption"?: string;
        "workweekviewenabled"?: boolean;
        "yearcaption"?: string;
    }
    interface K2btCalendarMonthView {
        "calendars"?: Calendar[];
        "itemsperday"?: number;
        "month"?: number;
        "onActionClicked"?: (event: K2btCalendarMonthViewCustomEvent<object>) => void;
        "onDayClicked"?: (event: K2btCalendarMonthViewCustomEvent<object>) => void;
        "onItemClicked"?: (event: K2btCalendarMonthViewCustomEvent<object>) => void;
        "readonly"?: boolean;
        "seemorecaption"?: string;
        "weekstartday"?: WeekStartDay;
        "year"?: number;
    }
    interface K2btCalendarPeriodView {
        "calendars"?: Calendar[];
        "dateFrom"?: Date;
        "dateTo"?: Date;
        "draftItemDescription"?: string;
        "endHour"?: number;
        "onDraftCanceled"?: (event: K2btCalendarPeriodViewCustomEvent<object>) => void;
        "onItemClicked"?: (event: K2btCalendarPeriodViewCustomEvent<object>) => void;
        "onNewDraftCreated"?: (event: K2btCalendarPeriodViewCustomEvent<object>) => void;
        "readonly"?: boolean;
        "startHour"?: number;
    }
    interface K2btEditCollection {
        "datatype"?: string;
        "decimals"?: number;
        "enabled"?: boolean;
        "inputclass"?: string;
        "integers"?: number;
        "invitemessage"?: string;
        "length"?: number;
        "maxSelectionSize"?: number;
        "onChange"?: (event: K2btEditCollectionCustomEvent<object>) => void;
        "onInput"?: (event: K2btEditCollectionCustomEvent<object>) => void;
        "readonlyclass"?: string;
        "value"?: Array<string>;
    }
    interface K2btEnhancedcombo {
        "activeElementValue"?: string;
        "additemcaption"?: string;
        "clearselectioncaption"?: string;
        "displayaslist"?: boolean;
        "emptyitemtext"?: string;
        "enableadditem"?: boolean;
        "enableclearselectionaction"?: boolean;
        "enabled"?: boolean;
        "enableselectallaction"?: boolean;
        "errorCode"?: string;
        "headermaxvisibleitems"?: number;
        "includeemptyitem"?: boolean;
        "includesearch"?: boolean;
        "maxSelectionSize"?: number;
        "noresultsfoundtext"?: string;
        "onChange"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "onFocus"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "onInput"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "onNewRecordClicked"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "onSearchChanged"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "onSelectionError"?: (event: K2btEnhancedcomboCustomEvent<object>) => void;
        "open"?: boolean;
        "readonlyclass"?: string;
        "searchfieldplaceholder"?: string;
        "searchvalue"?: string;
        "selectallcaption"?: string;
        "showiconsintags"?: boolean;
        "showselectionastags"?: boolean;
        "value"?: Array<string>;
        "values"?: Array<object> | string;
    }
    interface K2btEnhancedsuggest {
        "activeElementValue"?: string;
        "additemcaption"?: string;
        "emptyitemtext"?: string;
        "enableadditem"?: boolean;
        "enabled"?: boolean;
        "errorCode"?: string;
        "maxSelectionSize"?: number;
        "noresultsfoundtext"?: string;
        "onFocus"?: (event: K2btEnhancedsuggestCustomEvent<string>) => void;
        "onInputValueChanged"?: (event: K2btEnhancedsuggestCustomEvent<object>) => void;
        "onNewRecordClicked"?: (event: K2btEnhancedsuggestCustomEvent<object>) => void;
        "onSelectionError"?: (event: K2btEnhancedsuggestCustomEvent<object>) => void;
        "onSuggestValueChanged"?: (event: K2btEnhancedsuggestCustomEvent<string[]>) => void;
        "open"?: boolean;
        "placeholder"?: string;
        "readonlyclass"?: string;
        "searchvalue"?: string;
        "selectedValueDescription"?: string;
        "showiconsintags"?: boolean;
        "suggestmaxitems"?: number;
        "value"?: Array<string>;
        "values"?: Array<object> | string;
    }
    interface K2btImageRegionSelector {
        "enabled"?: boolean;
        "errorCode"?: string;
        "imageWithRegionsDefinition"?: ImageWithRegionsDefinition;
        "maxSelectionSize"?: number;
        "onSelectionChanged"?: (event: K2btImageRegionSelectorCustomEvent<object>) => void;
        "onSelectionError"?: (event: K2btImageRegionSelectorCustomEvent<object>) => void;
        "selectedIds"?: Array<string>;
    }
    interface K2btMaskedInput {
        "enabled"?: boolean;
        "inputclass"?: string;
        "mask"?: string;
        "numeric"?: boolean;
        "onChange"?: (event: K2btMaskedInputCustomEvent<object>) => void;
        "onInput"?: (event: K2btMaskedInputCustomEvent<object>) => void;
        "readonlyclass"?: string;
        "uppercase"?: boolean;
        "value"?: string;
    }
    interface K2btNumericInput {
        "decimals"?: number;
        "decimalseparator"?: string;
        "enabled"?: boolean;
        "includesign"?: boolean;
        "includethousandseparator"?: boolean;
        "inputclass"?: string;
        "integerdigits"?: number;
        "onChange"?: (event: K2btNumericInputCustomEvent<object>) => void;
        "onInput"?: (event: K2btNumericInputCustomEvent<object>) => void;
        "readonlyclass"?: string;
        "thousandseparator"?: string;
        "usermustenterdecimalseparator"?: boolean;
        "value"?: string;
        "valueprefix"?: string;
        "zeropadding"?: boolean;
    }
    interface K2btNumericSlider {
        "enabled"?: boolean;
        "max"?: number;
        "min"?: number;
        "numberclass"?: string;
        "numberreadonly"?: boolean;
        "numbervisible"?: boolean;
        "onChange"?: (event: K2btNumericSliderCustomEvent<object>) => void;
        "onInput"?: (event: K2btNumericSliderCustomEvent<object>) => void;
        "readonlyclass"?: string;
        "sliderclass"?: string;
        "step"?: number;
        "value"?: string;
    }
    interface K2btSignaturePad {
        "backgroundcolor"?: string;
        "backgroundimageurl"?: string;
        "clearbuttoncaption"?: string;
        "height"?: number;
        "onChange"?: (event: K2btSignaturePadCustomEvent<string>) => void;
        "showclearbutton"?: boolean;
        "width"?: number;
    }
    interface K2btToggleBar {
        "additemcaption"?: string;
        "emptyitemtext"?: string;
        "enableadditem"?: boolean;
        "enabled"?: boolean;
        "errorCode"?: string;
        "includeemptyitem"?: boolean;
        "maxSelectionSize"?: number;
        "noresultsfoundtext"?: string;
        "onChange"?: (event: K2btToggleBarCustomEvent<object>) => void;
        "onInput"?: (event: K2btToggleBarCustomEvent<object>) => void;
        "onNewRecordClicked"?: (event: K2btToggleBarCustomEvent<object>) => void;
        "onSelectionError"?: (event: K2btToggleBarCustomEvent<object>) => void;
        "readonlyclass"?: string;
        "togglestyle"?: string;
        "value"?: Array<string>;
        "values"?: Array<ControlInfoValue>;
    }
    interface IntrinsicElements {
        "k2bt-base-color-picker": K2btBaseColorPicker;
        "k2bt-calendar-action-menu": K2btCalendarActionMenu;
        "k2bt-calendar-day-in-month-picker": K2btCalendarDayInMonthPicker;
        "k2bt-calendar-day-view": K2btCalendarDayView;
        "k2bt-calendar-full-view": K2btCalendarFullView;
        "k2bt-calendar-month-view": K2btCalendarMonthView;
        "k2bt-calendar-period-view": K2btCalendarPeriodView;
        "k2bt-edit-collection": K2btEditCollection;
        "k2bt-enhancedcombo": K2btEnhancedcombo;
        "k2bt-enhancedsuggest": K2btEnhancedsuggest;
        "k2bt-image-region-selector": K2btImageRegionSelector;
        "k2bt-masked-input": K2btMaskedInput;
        "k2bt-numeric-input": K2btNumericInput;
        "k2bt-numeric-slider": K2btNumericSlider;
        "k2bt-signature-pad": K2btSignaturePad;
        "k2bt-toggle-bar": K2btToggleBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "k2bt-base-color-picker": LocalJSX.K2btBaseColorPicker & JSXBase.HTMLAttributes<HTMLK2btBaseColorPickerElement>;
            "k2bt-calendar-action-menu": LocalJSX.K2btCalendarActionMenu & JSXBase.HTMLAttributes<HTMLK2btCalendarActionMenuElement>;
            "k2bt-calendar-day-in-month-picker": LocalJSX.K2btCalendarDayInMonthPicker & JSXBase.HTMLAttributes<HTMLK2btCalendarDayInMonthPickerElement>;
            "k2bt-calendar-day-view": LocalJSX.K2btCalendarDayView & JSXBase.HTMLAttributes<HTMLK2btCalendarDayViewElement>;
            "k2bt-calendar-full-view": LocalJSX.K2btCalendarFullView & JSXBase.HTMLAttributes<HTMLK2btCalendarFullViewElement>;
            "k2bt-calendar-month-view": LocalJSX.K2btCalendarMonthView & JSXBase.HTMLAttributes<HTMLK2btCalendarMonthViewElement>;
            "k2bt-calendar-period-view": LocalJSX.K2btCalendarPeriodView & JSXBase.HTMLAttributes<HTMLK2btCalendarPeriodViewElement>;
            "k2bt-edit-collection": LocalJSX.K2btEditCollection & JSXBase.HTMLAttributes<HTMLK2btEditCollectionElement>;
            "k2bt-enhancedcombo": LocalJSX.K2btEnhancedcombo & JSXBase.HTMLAttributes<HTMLK2btEnhancedcomboElement>;
            "k2bt-enhancedsuggest": LocalJSX.K2btEnhancedsuggest & JSXBase.HTMLAttributes<HTMLK2btEnhancedsuggestElement>;
            "k2bt-image-region-selector": LocalJSX.K2btImageRegionSelector & JSXBase.HTMLAttributes<HTMLK2btImageRegionSelectorElement>;
            "k2bt-masked-input": LocalJSX.K2btMaskedInput & JSXBase.HTMLAttributes<HTMLK2btMaskedInputElement>;
            "k2bt-numeric-input": LocalJSX.K2btNumericInput & JSXBase.HTMLAttributes<HTMLK2btNumericInputElement>;
            "k2bt-numeric-slider": LocalJSX.K2btNumericSlider & JSXBase.HTMLAttributes<HTMLK2btNumericSliderElement>;
            "k2bt-signature-pad": LocalJSX.K2btSignaturePad & JSXBase.HTMLAttributes<HTMLK2btSignaturePadElement>;
            "k2bt-toggle-bar": LocalJSX.K2btToggleBar & JSXBase.HTMLAttributes<HTMLK2btToggleBarElement>;
        }
    }
}
