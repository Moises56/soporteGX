import { EventEmitter } from '../../stencil-public-runtime';
import { ControlInfoValue } from '../../utils/utils';
export declare class K2btEnhancedcombo {
  static readonly ERROR_SELECTION_FULL: string;
  value: Array<string>;
  values: Array<object> | string;
  includesearch: boolean;
  includeemptyitem: boolean;
  emptyitemtext: string;
  noresultsfoundtext: string;
  open: boolean;
  enableadditem: boolean;
  additemcaption: string;
  clearselectioncaption: string;
  selectallcaption: string;
  searchfieldplaceholder: string;
  searchvalue: string;
  enabled: boolean;
  maxSelectionSize: number;
  headermaxvisibleitems: number;
  readonlyclass: string;
  errorCode: string;
  showselectionastags: boolean;
  showiconsintags: boolean;
  displayaslist: boolean;
  enableclearselectionaction: boolean;
  enableselectallaction: boolean;
  activeElementValue: string;
  selectionErrorEvent: EventEmitter<object>;
  focusEvent: EventEmitter<object>;
  inputEvent: EventEmitter<object>;
  changeEvent: EventEmitter<object>;
  searchChangedEvent: EventEmitter<object>;
  newRecordClickedEvent: EventEmitter<object>;
  container: HTMLElement;
  selectedElement: HTMLElement;
  searchfield: HTMLElement;
  listContainer: HTMLElement;
  _keyboardSearchPrefix: string;
  _keyboardSearchLastKeystroke: any;
  isCollection(): boolean;
  processKeydown(event: KeyboardEvent): void;
  processKeydownForCollection(event: KeyboardEvent): void;
  private processCharacterForCollection;
  private processSpacebarForCollection;
  private processArrowUpForCollection;
  private processArrowDownForCollection;
  processKeydownSingleSelection(event: KeyboardEvent): void;
  private processCharacterForSingleSelection;
  private processArrowUpForSingleSelection;
  private processArrowDownForSingleSelection;
  onFocusIn(): void;
  resetPrefixSearch(): void;
  closeMenu(ev: any): void;
  getHeaderContent(): any;
  getSelectedItemSpan(v: ControlInfoValue): any;
  getReadonlyContent(): string;
  getHeaderTagsContent(vals: ControlInfoValue[]): any[];
  private valueIsSelected;
  toggleContentVisibilty(): void;
  getRawValues(): ControlInfoValue[];
  getFilteredValues(): Array<ControlInfoValue>;
  getFilteredValues_impl(origin: ControlInfoValue[]): ControlInfoValue[];
  setValue(value: any): void;
  setValueDebouncer: any;
  private setValueWithoutClosing;
  private emitChangedEvents;
  changeSearchValue(value: string): void;
  onIncludeNewRecordClick(): void;
  render(): any;
  private getCollectionActionsHeader;
  private getSelectAllAction;
  private getClearSelectionAction;
  onClearSelectionClick(): void;
  onSelectAllClick(): void;
  private addHeaderIfNecessary;
  getAtomicValues(): Array<ControlInfoValue>;
  getComboContent(): any;
  onImageError(e: any): void;
  getItemContent(item: ControlInfoValue, containsDetails: boolean, containsIcons: boolean, containsTrailingText: boolean, containsBadges: boolean): unknown;
  private getAtomicItemContent;
  private addMainItemContent;
  private addBadgeIfNecessary;
  private addIconIfNecessary;
  private addCheckboxIfNecessary;
  private getCategoryContent;
  private selectionIsFull;
  getHighlightedText(originalText: string): any;
  componentDidRender(): void;
  componentDidLoad(): void;
}
