{
	"Name": "K2BT_Stepper",
	"Target": "",
	"IsControlType": true,
	"Template": "<div class=\"K2BT_Stepper\">	<span data-k2btools-stepper-id=\"readonly\" class=\"Readonly{{AttributeClass}}\"></span>	<span data-k2btools-stepper-id=\"decrease\" class=\"K2BT_Stepper_Button K2BT_Stepper_Decrease\">âˆ’</span>	<input data-k2btools-stepper-id=\"input\" class=\"form-control {{AttributeClass}} K2BT_StepperValue\" type=\"numeric\" {{DataElement}} />	<span data-k2btools-stepper-id=\"increase\" class=\"K2BT_Stepper_Button K2BT_Stepper_Increase\">+</span></div>", 
	"Events": [
	],
	"Properties": [
		{
			"Id": "AttributeClass",
			"Name": "AttributeClass",
			"Type": "string",
			"Default": "Attribute_Trn"
		} ,
		{
			"Id": "Step",
			"Name": "Step",
			"Type": "numeric",
			"Default": ""
		} ,
		{
			"Id": "MinValue",
			"Name": "MinValue",
			"Type": "numeric",
			"Default": ""
		} ,
		{
			"Id": "MaxValue",
			"Name": "MaxValue",
			"Type": "numeric",
			"Default": ""
		} ,
		{
			"Id": "AttID",
			"Name": "Attribute",
			"Type": "numeric",
			"Default": ""
		} 
	],
	"Methods": {
		"Public": [
		],
		"Private": [
			{
				"Name": "_setBoundedValue",
				"Source": "  		if(newValue > Number(this.MaxValue))			$(this.input).val(Number(this.MaxValue));		else if(newValue < Number(this.MinValue))			$(this.input).val(Number(this.MinValue));		else			$(this.input).val(newValue);				this.setAttribute(Number($(this.input).val()));  ",
				"Return": "",
				"Parameters": [
					 {
						"Name": "newValue",
						"Type": "newValue"
					} 
				]
			} 
		]
	},
	"Scripts": {
		"AfterShow": [
			{
				"Name": "ButtonHandlers",
				"Source": "  	var uc = this;		var container = this.getContainerControl();	this.readonlySpan = $(container).find(\"span[data-k2btools-stepper-id=\'readonly\']\");  	this.decrease = $(container).find(\"span[data-k2btools-stepper-id=\'decrease\']\");	this.increase = $(container).find(\"span[data-k2btools-stepper-id=\'increase\']\");	this.input = $(container).find(\"input[data-k2btools-stepper-id=\'input\']\");		var classes = $.map(uc.AttributeClass.split(\" \"), function(s){ return \"Readonly\"+s;});	this.readonlySpan.addClass(classes);	this.input.attr(\"maxlength\", Math.max(this.MinValue.toString().length, this.MaxValue.toString().length, this.Step.toString().length))	this.input.attr(\"size\", this.input.attr(\"maxlength\"));		$(this.input).on(\"change\", function(e){		uc._setBoundedValue($(uc.input).val());	});		if(uc.Enabled){		this.readonlySpan.hide();		$(this.decrease).on(\"click\", function(e){			newValue = $(uc.input).val() - Number(uc.Step);			uc._setBoundedValue(newValue);		});				$(this.increase).on(\"click\", function(e){			newValue = Number($(uc.input).val()) + Number(uc.Step);			uc._setBoundedValue(newValue);		});	}else{		this.readonlySpan.show();		this.readonlySpan.text(this.input.val());		this.decrease.hide();		this.increase.hide();		this.input.hide();	}  ",
				"AngularLocation": ""
			} 
		],
		"BeforeShow": [
		]
	},
	"Dependencies": [
	],
	"Imports": [
	],
	"Styles": [
	]
}